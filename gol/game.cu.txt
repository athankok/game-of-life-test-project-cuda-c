#include <stdio.h>
#include <stdlib.h>



__global__ void GOL(int *a, int *b, int *dev_c) {
	int index = threadIdx.x + blockIdx.x * 258;
	int geitones=0;
	
	if (threadIdx.x != 0 || threadIdx.x != 258 || threadIdx.x != 0 || blockIdx.x != 0 || blockIdx.x != 258){
		if (a[index+1] == 1){
			geitones = geitones + 1;
		}

		if (a[index-1] == 1){
			geitones = geitones + 1;
		}
		if (a[index+258] == 1){
			geitones = geitones + 1;
		}
		if (a[index + 259] == 1){
			geitones = geitones + 1;
		}
		if (a[index + 257] == 1){
			geitones = geitones + 1;
		}
		if (a[index - 258] == 1){
			geitones = geitones + 1;
		}

		if (a[index - 259] == 1){
			geitones = geitones + 1;
		}
		if (a[index - 257] == 1){
			geitones = geitones + 1;
		}

		
		if (geitones == 2 && a[index]==0  ){
			b[index] = 1;
		}
		else if (a[index]==1){
			b[index] = -1;
		}
		else if (a[index] == -1){
			b[index] = 0;
		}
		else{
			b[index] = a[index];
		}
		dev_c[index] = b[index];
		}
	}

#define N (258*258)
#define THREADS_PER_BLOCK 258

int main(void) {
	int *a, *b, *c; // host copies of a, b, c
	int *dev_a, *dev_b, *dev_c; // device copies of a, b, c
	int size = N * sizeof(int); // we need space for N integers
	// allocate device copies of a, b, c
	cudaMalloc((void**)&dev_a, size);
	cudaMalloc((void**)&dev_b, size);
	cudaMalloc((void**)&dev_c, size);
	a = (int*)malloc(size);
	b = (int*)malloc(size);
	c = (int*)malloc(size);	int i;	for (i = 0; i < N; i++){
		a[i] = rand() % 2;		b[i] = 0;		}		
		// launch GOL() kernel with blocks and threads
		for (i = 0; i < 10000000; i++){
			cudaMemcpy(dev_a, a, size, cudaMemcpyHostToDevice);
			cudaMemcpy(dev_b, b, size, cudaMemcpyHostToDevice);
			GOL << < 258, 258 >> >(dev_a, dev_b, dev_c);
			cudaMemcpy(b, dev_b, size, cudaMemcpyDeviceToHost);
			cudaMemcpy(a, dev_a, size, cudaMemcpyDeviceToHost);
			cudaMemcpy(c, dev_c, size, cudaMemcpyDeviceToHost);

			int sum = 0;

			for (i = 0; i < N; i++){
				a[i] = b[i];
				if (c[i] == 1){					sum = sum + 1;				}
			}
			printf("%i \n", sum);
			system("pause");
		}
		
		
	free(a); free(b); free(c);
	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);


	return 0;
}